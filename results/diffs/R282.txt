diff --git a/RefactorTest/RenameCpp11.cpp b/RefactorTest/RenameCpp11.cpp
index 96b65ff..1dec1e7 100644
--- a/RefactorTest/RenameCpp11.cpp
+++ b/RefactorTest/RenameCpp11.cpp
@@ -141,31 +141,31 @@ void f7()
 void f8()
 {
     // #TEST#: R279 Rename X
-    struct X
+    struct Goink
     {
         // #TEST#: R280 Rename X via deleted c'tor
-        X() = delete;
+        Goink() = delete;
         // #TEST#: R281 Rename X via deleted copy c'tor
         // #TEST#: R282 Rename X via deleted copy c'tor argument
-        X(const X &rhs) = delete;
+        Goink(const Goink &rhs) = delete;
         // #TEST#: R283 Rename X via deleted move c'tor
         // #TEST#: R284 Rename X via deleted move c'tor argument
-        X(X &&rhs) = delete;
+        Goink(Goink &&rhs) = delete;
         // #TEST#: R285 Rename X via deleted d'tor
-        ~X() = delete;
+        ~Goink() = delete;
         // #TEST#: R286 Rename X via deleted copy assignment return type
         // #TEST#: R287 Rename X via deleted copy assignment argument
-        X &operator=(const X &rhs) = delete;
+        Goink &operator=(const Goink &rhs) = delete;
         // #TEST#: R288 Rename X via deleted move assignment return type
         // #TEST#: R289 Rename X via deleted move assignment argument
-        X &operator=(X &&rhs) = delete;
+        Goink &operator=(Goink &&rhs) = delete;
 
         int x = 1;
         int y = 2;
         std::string s = "foo";
     };
     // #TEST#: R290 Rename X
-    X *x = nullptr;
+    Goink *x = nullptr;
 }
 
 void f9()
