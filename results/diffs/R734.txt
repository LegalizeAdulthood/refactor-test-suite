diff --git a/RefactorTest/RenameCpp17.cpp b/RefactorTest/RenameCpp17.cpp
index 3d0f364..0d34971 100644
--- a/RefactorTest/RenameCpp17.cpp
+++ b/RefactorTest/RenameCpp17.cpp
@@ -229,11 +229,11 @@ void f5()
             int val;
             std::string name;
         };
-        Foo f{1, "one"};
+        Foo goink{1, "one"};
         // #TEST#: R722 Rename binding val1
         // #TEST#: R723 Rename binding name1
         // #TEST#: R724 Rename use of f
-        const auto [val1, name1] = f;
+        const auto [val1, name1] = goink;
         // #TEST#: R725 Rename use of val1
         REQUIRE_EQUAL(1, val1);
         // #TEST#: R726 Rename use of name1
@@ -241,7 +241,7 @@ void f5()
         // #TEST#: R727 Rename binding val2
         // #TEST#: R728 Rename binding name2
         // #TEST#: R729 Rename use of f
-        const auto &[val2, name2] = f;
+        const auto &[val2, name2] = goink;
         // #TEST#: R730 Rename use of val2
         REQUIRE_EQUAL(1, val2);
         // #TEST#: R731 Rename use of name2
@@ -249,17 +249,17 @@ void f5()
         // #TEST#: R732 Rename binding val3
         // #TEST#: R733 Rename binding name3
         // #TEST#: R734 Rename use of f
-        auto &[val3, name3] = f;
+        auto &[val3, name3] = goink;
         // #TEST#: R735 Rename use of val3
         val3 = 11;
         // #TEST#: R736 Rename use of name3
         name3 = "eleven";
-        REQUIRE_EQUAL(11, f.val);
-        REQUIRE_EQUAL(std::string{"eleven"}, f.name);
+        REQUIRE_EQUAL(11, goink.val);
+        REQUIRE_EQUAL(std::string{"eleven"}, goink.name);
         // #TEST#: R737 Rename binding val4
         // #TEST#: R738 Rename binding name4
         // #TEST#: R739 Rename use of f
-        auto [val4, name4] = f;
+        auto [val4, name4] = goink;
         // #TEST#: R740 Rename use of val4
         REQUIRE_EQUAL(11, val4);
         // #TEST#: R741 Rename use of name4
