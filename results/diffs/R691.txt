diff --git a/RefactorTest/RenameCpp17.cpp b/RefactorTest/RenameCpp17.cpp
index 3d0f364..5cad368 100644
--- a/RefactorTest/RenameCpp17.cpp
+++ b/RefactorTest/RenameCpp17.cpp
@@ -185,11 +185,11 @@ void f5()
     // binding to tuple-like type
     {
         using pair = std::tuple<int, std::string>;
-        pair p{1, "one"};
+        pair goink{1, "one"};
         // #TEST#: R686 Rename binding val
         // #TEST#: R687 Rename binding name
         // #TEST#: R688 Rename use of p
-        const auto [val, name] = p;
+        const auto [val, name] = goink;
         // #TEST#: R970 Rename use of val
         REQUIRE_EQUAL(1, val);
         // #TEST#: R971 Rename use of name
@@ -197,7 +197,7 @@ void f5()
         // #TEST#: R689 Rename binding val2
         // #TEST#: R690 Rename binding name2
         // #TEST#: R691 Rename use of p
-        auto [val2, name2] = p;
+        auto [val2, name2] = goink;
         // #TEST#: R692 Rename use of val2
         REQUIRE_EQUAL(1, val2);
         // #TEST#: R693 Rename use of name2
@@ -205,17 +205,17 @@ void f5()
         // #TEST#: R694 Rename binding val3
         // #TEST#: R695 Rename binding name3
         // #TEST#: R696 Rename use of p
-        auto &[val3, name3] = p;
+        auto &[val3, name3] = goink;
         // #TEST#: R697 Rename use of val3
         val3 = 11;
         // #TEST#: R698 Rename use of name3
         name3 = "eleven";
-        REQUIRE_EQUAL(11, std::get<0>(p));
-        REQUIRE_EQUAL(std::string{"eleven"}, std::get<1>(p));
+        REQUIRE_EQUAL(11, std::get<0>(goink));
+        REQUIRE_EQUAL(std::string{"eleven"}, std::get<1>(goink));
         // #TEST#: R699 Rename binding val4
         // #TEST#: R700 Rename binding name4
         // #TEST#: R701 Rename use of p
-        const auto &[val4, name4] = p;
+        const auto &[val4, name4] = goink;
         // #TEST#: R702 Rename use of val4
         REQUIRE_EQUAL(11, val4);
         // #TEST#: R703 Rename use of name4
