diff --git a/RefactorTest/RenameCpp20Constraints.cpp b/RefactorTest/RenameCpp20Constraints.cpp
index 21c29d3..a17d989 100644
--- a/RefactorTest/RenameCpp20Constraints.cpp
+++ b/RefactorTest/RenameCpp20Constraints.cpp
@@ -66,7 +66,7 @@ template <typename T, typename U>
 // #TEST#: R997 Rename parameter lhs
 // #TEST#: R998 Rename use of U
 // #TEST#: R999 Rename parameter rhs
-concept Multiplicable = requires(T lhs, U rhs)
+concept Goink = requires(T lhs, U rhs)
 {
     // #TEST#: R1000 Rename use of lhs
     // #TEST#: R1001 Rename use of rhs
@@ -226,7 +226,7 @@ template <typename T, typename U = T>
 // #TEST#: R1085 Rename concept Multiplicable
 // #TEST#: R1086 Rename use of T
 // #TEST#: R1087 Rename use of U
-    requires Multiplicable<T, U>
+    requires Goink<T, U>
 // #TEST#: R1088 Rename function product1
 // #TEST#: R1089 Rename use of T
 // #TEST#: R1090 Rename parameter lhs
@@ -257,7 +257,7 @@ auto product2(T lhs, U rhs) -> decltype(lhs * rhs)
     // #TEST#: R1107 Rename concept Multiplicable
     // #TEST#: R1108 Rename use of T
     // #TEST#: R1109 Rename use of U
-    requires Multiplicable<T, U>
+    requires Goink<T, U>
 {
     // #TEST#: R1110 Rename use of lhs
     // #TEST#: R1111 Rename use of rhs
@@ -273,7 +273,7 @@ template <typename T, typename U = T>
 // #TEST#: R1116 Rename concept Multiplicable
 // #TEST#: R1117 Rename second use of T
 // #TEST#: R1118 Rename use of U
-    requires std::is_arithmetic_v<T> || Multiplicable<T, U>
+    requires std::is_arithmetic_v<T> || Goink<T, U>
 // #TEST#: R1119 Rename function product3
 // #TEST#: R1120 Rename use of T
 // #TEST#: R1121 Rename parameter lhs
@@ -305,7 +305,7 @@ auto product4(T lhs, U rhs) -> decltype(lhs * rhs)
     // #TEST#: R1139 Rename concept Multiplicable
     // #TEST#: R1140 Rename second use of T
     // #TEST#: R1141 Rename use of U
-    requires std::is_arithmetic_v<T> || Multiplicable<T, U>
+    requires std::is_arithmetic_v<T> || Goink<T, U>
 {
     // #TEST#: R1142 Rename use of lhs
     // #TEST#: R1143 Rename use of rhs
@@ -321,7 +321,7 @@ template <typename T, typename U = T>
 // #TEST#: R1148 Rename concept Multiplicable
 // #TEST#: R1149 Rename second use of T
 // #TEST#: R1150 Rename use of U
-    requires std::is_arithmetic_v<T> && Multiplicable<T, U>
+    requires std::is_arithmetic_v<T> && Goink<T, U>
 // #TEST#: R1151 Rename function product5
 // #TEST#: R1152 Rename use of T
 // #TEST#: R1153 Rename parameter lhs
@@ -353,7 +353,7 @@ auto product6(T lhs, U rhs) -> decltype(lhs * rhs)
     // #TEST#: R1171 Rename concept Multiplicable
     // #TEST#: R1172 Rename second use of T
     // #TEST#: R1173 Rename use of U
-    requires std::is_arithmetic_v<T> && Multiplicable<T, U>
+    requires std::is_arithmetic_v<T> && Goink<T, U>
 {
     // #TEST#: R1174 Rename use of lhs
     // #TEST#: R1175 Rename use of rhs
@@ -370,7 +370,7 @@ template <typename T, typename U = T>
 // #TEST#: R1181 Rename concept Multiplicable
 // #TEST#: R1182 Rename second use of T
 // #TEST#: R1183 Rename second use of U
-    requires(std::is_arithmetic_v<T> && std::is_arithmetic_v<U>) || Multiplicable<T, U>
+    requires(std::is_arithmetic_v<T> && std::is_arithmetic_v<U>) || Goink<T, U>
 // #TEST#: R1184 Rename function product7
 // #TEST#: R1185 Rename use of T
 // #TEST#: R1186 Rename parameter lhs
@@ -403,7 +403,7 @@ auto product8(T lhs, U rhs) -> decltype(lhs * rhs)
     // #TEST#: R1205 Rename concept Multiplicable
     // #TEST#: R1206 Rename second use of T
     // #TEST#: R1207 Rename second use of U
-    requires(std::is_arithmetic_v<T> && std::is_arithmetic_v<U>) || Multiplicable<T, U>
+    requires(std::is_arithmetic_v<T> && std::is_arithmetic_v<U>) || Goink<T, U>
 {
     // #TEST#: R1208 Rename use of lhs
     // #TEST#: R1209 Rename use of rhs
@@ -809,7 +809,7 @@ template <typename T, typename U = T>
 // #TEST#: R1339 Rename concept Multiplicable
 // #TEST#: R1340 Rename use of T
 // #TEST#: R1341 Rename use of U
-    requires Multiplicable<T, U>
+    requires Goink<T, U>
 class Product1
 {
 public:
@@ -833,7 +833,7 @@ template <typename T, typename U = T>
 // #TEST#: R1353 Rename concept Multiplicable
 // #TEST#: R1354 Rename use of T
 // #TEST#: R1355 Rename use of U
-    requires Multiplicable<T, U>
+    requires Goink<T, U>
 struct ProductStruct1
 {
     // #TEST#: R1356 Rename use of T
@@ -856,7 +856,7 @@ template <typename T, typename U = T>
 // #TEST#: R1367 Rename concept Multiplicable
 // #TEST#: R1368 Rename use of T
 // #TEST#: R1369 Rename use of U
-    requires Multiplicable<T, U>
+    requires Goink<T, U>
 union ProductUnion1
 {
     // #TEST#: R1370 Rename use of T
@@ -881,7 +881,7 @@ template <typename T, typename U = T>
 // #TEST#: R1381 Rename first use of T
 // #TEST#: R1383 Rename second use of T
 // #TEST#: R1384 Rename use of U
-    requires std::is_arithmetic_v<T> || Multiplicable<T, U>
+    requires std::is_arithmetic_v<T> || Goink<T, U>
 class Product2
 {
 public:
@@ -906,7 +906,7 @@ template <typename T, typename U = T>
 // #TEST#: R1396 Rename first use of T
 // #TEST#: R1398 Rename second use of T
 // #TEST#: R1399 Rename use of U
-    requires std::is_arithmetic_v<T> || Multiplicable<T, U>
+    requires std::is_arithmetic_v<T> || Goink<T, U>
 struct ProductStruct2
 {
     // #TEST#: R1400 Rename use of T
@@ -930,7 +930,7 @@ template <typename T, typename U = T>
 // #TEST#: R1411 Rename first use of T
 // #TEST#: R1413 Rename second use of T
 // #TEST#: R1414 Rename use of U
-    requires std::is_arithmetic_v<T> || Multiplicable<T, U>
+    requires std::is_arithmetic_v<T> || Goink<T, U>
 union ProductUnion2
 {
     // #TEST#: R1415 Rename use of T
@@ -955,7 +955,7 @@ template <typename T, typename U = T>
 // #TEST#: R1426 Rename first use of T
 // #TEST#: R1428 Rename second use of T
 // #TEST#: R1429 Rename use of U
-    requires std::is_arithmetic_v<T> && Multiplicable<T, U>
+    requires std::is_arithmetic_v<T> && Goink<T, U>
 class Product3
 {
 public:
@@ -980,7 +980,7 @@ template <typename T, typename U = T>
 // #TEST#: R1441 Rename first use of T
 // #TEST#: R1443 Rename second use of T
 // #TEST#: R1444 Rename use of U
-    requires std::is_arithmetic_v<T> && Multiplicable<T, U>
+    requires std::is_arithmetic_v<T> && Goink<T, U>
 struct ProductStruct3
 {
     // #TEST#: R1445 Rename use of T
@@ -1004,7 +1004,7 @@ template <typename T, typename U = T>
 // #TEST#: R1456 Rename first use of T
 // #TEST#: R1458 Rename second use of T
 // #TEST#: R1459 Rename use of U
-    requires std::is_arithmetic_v<T> && Multiplicable<T, U>
+    requires std::is_arithmetic_v<T> && Goink<T, U>
 union ProductUnion3
 {
     // #TEST#: R1460 Rename use of T
@@ -1030,7 +1030,7 @@ template <typename T, typename U = T>
 // #TEST#: R1472 Rename second use of T
 // #TEST#: R1474 Rename third use of T
 // #TEST#: R1475 Rename use of U
-    requires(std::is_integral_v<T> || std::is_floating_point_v<T>) && Multiplicable<T, U>
+    requires(std::is_integral_v<T> || std::is_floating_point_v<T>) && Goink<T, U>
 class Product4
 {
 public:
@@ -1056,7 +1056,7 @@ template <typename T, typename U = T>
 // #TEST#: R1488 Rename second use of T
 // #TEST#: R1490 Rename third use of T
 // #TEST#: R1491 Rename use of U
-    requires(std::is_integral_v<T> || std::is_floating_point_v<T>) && Multiplicable<T, U>
+    requires(std::is_integral_v<T> || std::is_floating_point_v<T>) && Goink<T, U>
 struct ProductStruct4
 {
     // #TEST#: R1492 Rename use of T
@@ -1081,7 +1081,7 @@ template <typename T, typename U = T>
 // #TEST#: R1504 Rename second use of T
 // #TEST#: R1506 Rename third use of T
 // #TEST#: R1507 Rename use of U
-    requires(std::is_integral_v<T> || std::is_floating_point_v<T>) && Multiplicable<T, U>
+    requires(std::is_integral_v<T> || std::is_floating_point_v<T>) && Goink<T, U>
 union ProductUnion4
 {
     // #TEST#: R1508 Rename use of T

