diff --git a/RefactorTest/RenameCpp17.cpp b/RefactorTest/RenameCpp17.cpp
index c346b5d..68e72f3 100644
--- a/RefactorTest/RenameCpp17.cpp
+++ b/RefactorTest/RenameCpp17.cpp
@@ -377,14 +377,14 @@ struct ValueName
 
 void f8()
 {
-    float f1{1.0f};
+    float goink{1.0f};
     int i1{10};
     // declarations
     {
         // #TEST#: R759 Rename local variable p
         // #TEST#: R760 Rename use of f1
         // #TEST#: R761 Rename use of i1
-        std::pair p{f1, i1};
+        std::pair p{goink, i1};
         // #TEST#: R762 Rename use of p
         REQUIRE_EQUAL(1.0f, p.first);
         // #TEST#: R763 Rename use of p
@@ -392,7 +392,7 @@ void f8()
         // #TEST#: R764 Rename local variable t
         // #TEST#: R765 Rename use of f1
         // #TEST#: R766 Rename use of i1
-        std::tuple t{f1, i1};
+        std::tuple t{goink, i1};
         // #TEST#: R767 Rename use of t
         REQUIRE_EQUAL(1.0f, std::get<0>(t));
         // #TEST#: R768 Rename use of t
@@ -403,7 +403,7 @@ void f8()
         // #TEST#: R769 Rename local variable p1
         // #TEST#: R770 Rename use of f1
         // #TEST#: R771 Rename use of i1
-        const auto *p1 = new std::pair{f1, i1};
+        const auto *p1 = new std::pair{goink, i1};
         // #TEST#: R772 Rename use of p1
         REQUIRE_EQUAL(1.0f, p1->first);
         // #TEST#: R773 Rename use of p1
@@ -415,7 +415,7 @@ void f8()
         // #TEST#: R776 Rename local variable p2
         // #TEST#: R777 Rename use of f1
         // #TEST#: R778 Rename use of name
-        const auto *p2 = new ValueName{f1, std::string_view{name}};
+        const auto *p2 = new ValueName{goink, std::string_view{name}};
         // #TEST#: R779 Rename use of p2
         REQUIRE_EQUAL(1.0f, p2->value);
         // #TEST#: R780 Rename use of name
