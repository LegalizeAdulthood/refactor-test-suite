diff --git a/RefactorTest/RenameCpp20Constraints.cpp b/RefactorTest/RenameCpp20Constraints.cpp
index 977575b..4c33939 100644
--- a/RefactorTest/RenameCpp20Constraints.cpp
+++ b/RefactorTest/RenameCpp20Constraints.cpp
@@ -925,7 +925,7 @@ template <typename T, typename U = T>
 // #TEST#: R1399 Rename second use of T
 // #TEST#: R1400 Rename use of U
     requires std::is_arithmetic_v<T> || Multiplicable<T, U>
-struct ProductStruct2
+struct Goink
 {
     // #TEST#: R1401 Rename use of T
     // #TEST#: R1402 Rename parameter lhs
@@ -1342,14 +1342,14 @@ void f2()
     }
     {
         // #TEST#: R1559 Rename ProductStruct2
-        ProductStruct2<int, double> p1;
+        Goink<int, double> p1;
         REQUIRE_EQUAL(6.0, p1(2, 3.0));
         // #TEST#: R1560 Rename ProductStruct2
-        ProductStruct2<double> p2;
+        Goink<double> p2;
         const double d = p2(2.0, 2.0);
         REQUIRE_EQUAL(4.0, d);
         // #TEST#: R1561 Rename ProductStruct2
-        ProductStruct2<Rope> s3;
+        Goink<Rope> s3;
         const Rope r = s3(Rope{"two"}, Rope{"three"});
         REQUIRE_EQUAL(Rope{"two three"}, r);
     }
@@ -1362,7 +1362,7 @@ void f2()
         const double d = p2(2.0, 2.0);
         REQUIRE_EQUAL(4.0, d);
         // #TEST#: R1564 Rename ProductUnion2
-        ProductStruct2<Rope> s3;
+        Goink<Rope> s3;
         const Rope r = s3(Rope{"two"}, Rope{"three"});
         REQUIRE_EQUAL(Rope{"two three"}, r);
     }

